<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MirzaCryptoHelpersV2</name>
    </assembly>
    <members>
        <member name="T:MirzaCryptoHelpers.AsymmetricCryptos.AsymmetricCrypto">
            <summary>
            This is common class for Asymmetric Cryptography operations. 
            You can use this class to perform dependency injection.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.AsymmetricCryptos.AsymmetricCrypto.#ctor">
            <summary>
            Default constructor assigns RsaCrypto class to perform Asymmetric Cryptography operations. 
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.AsymmetricCryptos.AsymmetricCrypto.#ctor(MirzaCryptoHelpers.AsymmetricCryptos.IAsymmetricCrypto)">
            <summary>
            Injectable constructor that can use your own IAsymmetricCryptography implementation.
            </summary>
            <param name="asymmetricCryptography">Class that implements IAsymmetricCryptography.</param>
        </member>
        <member name="M:MirzaCryptoHelpers.AsymmetricCryptos.AsymmetricCrypto.GenerateKeys(System.Int32)">
            <summary>
            To encrypt/decrypt data, it must be called first to generate both keys
            and used to perform the operations.
            </summary>
            <returns>SessionsKeys. Returns null if GenerateKeys fails.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">'keySize' must be in valid range.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.AsymmetricCryptos.AsymmetricCrypto.Encrypt(System.Byte[],System.String,System.Int32)">
            <summary>
            Encrypts the data using public key generated by GenerateKeys() method.
            </summary>
            <param name="data">Data to encrypt in bytes.</param>
            <param name="publicKeyXml">Public key in xml format.</param>
            <param name="keySize">Key</param>
            <returns>Encrypted data in bytes.</returns>
            <exception cref="T:System.ArgumentNullException">'data' is null</exception>
            <exception cref="T:System.ArgumentNullException">'publicKeyXml' is null/empty.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">'keySize' must be in valid range.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.AsymmetricCryptos.AsymmetricCrypto.Decrypt(System.Byte[],System.String,System.Int32)">
            <summary>
            Decrypts the data using private key generated by GenerateKeys() method.
            PrivateKey must be generated along with PublicKey.
            </summary>
            <param name="data">Data to decrypt in bytes.</param>
            <param name="privateKeyXml">Private key in xml format.</param>
            <param name="keySize">Key</param>
            <returns>Decrypted data in xml format.</returns>
            <exception cref="T:System.ArgumentNullException">'data' is null</exception>
            <exception cref="T:System.ArgumentNullException">'privateKeyXml' is null/empty.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">'keySize' must be in valid range.</exception>
        </member>
        <member name="T:MirzaCryptoHelpers.AsymmetricCryptos.RSACrypto">
            <summary>
            This class performs Encryption and Decryption using RSA Algorithm.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.AsymmetricCryptos.RSACrypto.GenerateKeys(System.Int32)">
            <summary>
            To encrypt/decrypt data, it must be called first to generate both keys
            and used to perform the operations.
            </summary>
            <param name="keySize">Rsa Legal Key Size (384-16384 with skipSize=8).</param>
            <returns>SessionsKeys. Returns null if GenerateKeys fails.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">'keySize' must be in range of 384-16384 with skipSize=8</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.AsymmetricCryptos.RSACrypto.Encrypt(System.Byte[],System.String,System.Int32)">
            <summary>
            Encrypts the data using public key generated by GenerateKeys() method.
            </summary>
            <param name="data">Data to encrypt in bytes.</param>
            <param name="publicKeyXml">Public key in xml format.</param>
            <param name="keySize">Rsa Legal Key Size (384-16384 with skipSize=8).</param>
            <returns>Encrypted data.</returns>
            <exception cref="T:System.ArgumentNullException">'data' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'publicKeyXml' is null/empty.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">'keySize' must be in range of 384-16384 with skipSize=8</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.AsymmetricCryptos.RSACrypto.Decrypt(System.Byte[],System.String,System.Int32)">
            <summary>
            Decrypts the data using private key generated by GenerateKeys() method.
            PrivateKey must be generated along with PublicKey.
            </summary>
            <param name="data">Data to decrypt in bytes.</param>
            <param name="privateKeyXml">Private key in xml format.</param>
            <param name="keySize">Rsa Legal Key Size (384-16384 with skipSize=8).</param>
            <returns>Decrypted data.</returns>
            <exception cref="T:System.ArgumentNullException">'data' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'privateKeyXml' is null/empty.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">'keySize' must be in range of 384-16384 with skipSize=8</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.AsymmetricCryptos.RSACrypto.GetValidKeySizes">
            <summary>
            Gets valid RSA key sizes.
            </summary>
            <returns>Valid RSA key sizes in array of integer type.</returns>
        </member>
        <member name="T:MirzaCryptoHelpers.AsymmetricCryptos.RSACryptoMachineKeyStore">
            <summary>
            Encrypts/Decrypts data using CSP with Microsoft Strong Cryptographic Provider.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.AsymmetricCryptos.RSACryptoMachineKeyStore.ClearKeysFromContainer">
            <summary>
            Clears keys from container.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.AsymmetricCryptos.RSACryptoMachineKeyStore.Encrypt(System.Byte[],System.Int32)">
            <summary>
            Encrypts data using Microsoft Strong Cryptographic Provider and stores keys to container.
            It will store keys to computer's key store. It Uses UseMachineKeyStore flag for CspParameters.
            </summary>
            <param name="data">Data to encrypt in bytes.</param>
            <param name="keySize">Rsa Legal Key Size (384-16384 with skipSize=8).</param>
            <returns>Encrypted data.</returns>
            <exception cref="T:System.ArgumentNullException">'data' is null</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">'keySize' must be in range of 384-16384 with skipSize=8</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.AsymmetricCryptos.RSACryptoMachineKeyStore.Decrypt(System.Byte[],System.Int32)">
            <summary>
            Decrypts data using Microsoft Strong Cryptographic Provider and stores keys to container.
            It will store keys to computer's key store. It Uses UseMachineKeyStore flag for CspParameters.
            </summary>
            <param name="data">Data to encrypt in bytes.</param>
            <param name="keySize">Rsa Legal Key Size (384-16384 with skipSize=8).</param>
            <returns>Decrypted data.</returns>
            <exception cref="T:System.ArgumentNullException">'data' is null</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">'keySize' must be in range of 384-16384 with skipSize=8</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.AsymmetricCryptos.RSACryptoMachineKeyStore.GetValidKeySizes">
            <summary>
            Gets valid RSA key sizes.
            </summary>
            <returns>Valid RSA key sizes in array of integer type.</returns>
        </member>
        <member name="T:MirzaCryptoHelpers.AsymmetricCryptos.SessionKeys">
            <summary>
            This class holds public and private keys in xml
            to perform asymmetric encryption.
            </summary>
        </member>
        <member name="P:MirzaCryptoHelpers.AsymmetricCryptos.SessionKeys.PublicKeyXml">
            <summary>
            Gets/Sets public key to encrypt the data.
            </summary>
        </member>
        <member name="P:MirzaCryptoHelpers.AsymmetricCryptos.SessionKeys.PrivateKeyXml">
            <summary>
            Gets/Sets private key to decrypt the data.
            </summary>
        </member>
        <member name="T:MirzaCryptoHelpers.Common.BitComparer">
            <summary>
            Class that performs comparison between 2 data.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitComparer.CompareBytes(System.Byte[],System.Byte[])">
            <summary>
            Compares 2 data in bytes and returns true if both are same, otherwise false.
            </summary>
            <param name="data1">Data 1.</param>
            <param name="data2">Data 2.</param>
            <returns>Returs true if both are same, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">First data cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">Second data cannot be null.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitComparer.CompareHashes(System.Byte[],System.Byte[])">
            <summary>
            Compares 2 data using SHA-256 algorithm.
            </summary>
            <param name="data1">Data 1.</param>
            <param name="data2">Data 2.</param>
            <returns>Returs true if both are same, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">First data cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">Second data cannot be null.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitComparer.CompareHashes(System.Byte[],System.Byte[],MirzaCryptoHelpers.Hashings.IHashCrypto)">
            <summary>
            Compares 2 data using algorithm that implements IHashCrypto interface.
            </summary>
            <param name="data1">Data 1.</param>
            <param name="data2">Data 2.</param>
            <param name="hash">Hash algorithm that implements IHashCrypto interface.</param>
            <returns>Returs true if both are same, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">First data cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">Second data cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">Hash algorithm cannot be null.</exception>
        </member>
        <member name="T:MirzaCryptoHelpers.Common.BitHelpers">
            <summary>
            Static class that provides basic helpers to support cryptographic operations.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.GenerateRandomNumbers(System.Int32)">
            <summary>
            Generates random numbers.
            </summary>
            <param name="length">Length of bytes.</param>
            <returns>Random numbers.</returns>
            <exception cref="T:System.InvalidOperationException">'length' must be greater than 0.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertStringToBytes(System.String)">
            <summary>
            Converts given string to UTF-8 bytes.
            </summary>
            <param name="input">Input string.</param>
            <returns>UTF-8 bytes.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertBytesToString(System.Byte[])">
            <summary>
            Converts bytes data to UTF-8 string.
            </summary>
            <param name="data">Data in bytes.</param>
            <returns>UTF-8 string.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToBase64String(System.Byte[])">
            <summary>
            Converts bytes data to Base64 encoded string.
            </summary>
            <param name="data">Data in bytes.</param>
            <returns>Base64 encoded string.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertFromBase64String(System.String)">
            <summary>
            Converts Base64 encoded string to bytes.
            </summary>
            <param name="base64String">Base64 encoded string.</param>
            <returns>Data in bytes. Returns null if operation fails.</returns>
            <exception cref="T:System.ArgumentNullException">'base64String' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.CreateSecurePassword(System.String,MirzaCryptoHelpers.Hashings.IHashCrypto,System.Int32)">
            <summary>
            Creates secure password based on the predefined input.
            Hash algorithm must implement IHash interface and choosen algorithm
            will determine the size of password returned.
            </summary>
            <param name="input">Input as string. It's called predefined input.</param>
            <param name="hashCrypto">Concrete hash algorithm that implements IHash interface.</param>
            <param name="iteration">Iteration count.</param>
            <returns>Random password in bytes.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'hashCrypto' cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">'iteration' is invalid.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.CreateSecurePassword(System.String,System.Int32,System.Int32)">
            <summary>
            Creates secure password based on the predefined input.
            Size of bytes determines the size of returned password.
            Iteration determines how many iterations to take to produce final result.
            </summary>
            <param name="input">Input as string. It's called predefined input.</param>
            <param name="size">Size of returned password in bytes.</param>
            <param name="iteration">Iteration count.</param>
            <returns>Random password in bytes.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'size' cannot be less than 8 bytes.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">'iteration' is invalid.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToBinary(System.String)">
            <summary>
            Converts string input to binary.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Binary string.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToBinary(System.Char)">
            <summary>
            Converts char to binary.
            </summary>
            <param name="input">Input as char.</param>
            <returns>Binary string. Returns Empty string if fails.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToBinary(System.Int16)">
            <summary>
            Converts Int16 input to binary
            </summary>
            <param name="input">Input as Int16.</param>
            <returns>Binary string. Returns Empty string if fails.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToBinary(System.Int32)">
            <summary>
            Converts Int32 input to binary
            </summary>
            <param name="input">Input as Int32.</param>
            <returns>Binary string. Returns Empty string if fails.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToBinary(System.Int64)">
            <summary>
            Converts Int64 input to binary.
            </summary>
            <param name="input">Input as Int64.</param>
            <returns>Binary string. Returns Empty string if fails.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertFromBinary(System.String,System.Int64[]@)">
            <summary>
            Converts from binary to array of Int64. Each binary converted value will be stored in 'result' index.
            </summary>
            <param name="binary">Binary data in string format. Ex: 0011 0011.</param>
            <param name="result">Array of Int64. It'll be empty if conversion fails.</param>
            <returns>True if conversion succeeds. Else returns false.</returns>
            <exception cref="T:System.ArgumentNullException">'binary' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertFromBinary(System.String,System.String@)">
            <summary>
            Converts from binary string to normal string.
            </summary>
            <param name="binary">Binary data in string format. Ex: 0011 0011. Returns null if fails.</param>
            <param name="result">Normal string as a result of conversion.</param>
            <returns>True if conversion succeeds. Else returns false.</returns>
            <exception cref="T:System.ArgumentNullException">'binary' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToOctal(System.String)">
            <summary>
            Converts string input to octal.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Octal string. Returns empty string if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToOctal(System.Char)">
            <summary>
            Converts char input to octal.
            </summary>
            <param name="input">Input as char.</param>
            <returns>Octal string. Returns empty if fails.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToOctal(System.Int16)">
            <summary>
            Converts Int16 input to octal.
            </summary>
            <param name="input">Input as Int16.</param>
            <returns>Octal in string. Returns empty if fails.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToOctal(System.Int32)">
            <summary>
            Converts Int32 input to octal.
            </summary>
            <param name="input">Input as Int32.</param>
            <returns>Octal string. Returns empty if fails.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToOctal(System.Int64)">
            <summary>
            Converts Int64 to octal.
            </summary>
            <param name="input">Input as Int64.</param>
            <returns>Octal string. Returns empty if fails.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertFromOctal(System.String,System.Int64[]@)">
            <summary>
            Converts from octal to array of Int64. Each octal converted value will be stored in 'result' index.
            </summary>
            <param name="octal">Octal data in string format. Ex: 435 014 555.</param>
            <param name="result">Array of Int64. It'll be empty if conversion fails.</param>
            <returns>True if conversion succeeds. Else returns false.</returns>
            <exception cref="T:System.ArgumentNullException">'octal' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertFromOctal(System.String,System.String@)">
            <summary>
            Converts from octal string to normal string.
            </summary>
            <param name="octal">Octal data in string format. Ex: 435 014 555. Returns null if fails.</param>
            <param name="result">Normal string as a result of conversion.</param>
            <returns>True if conversion succeeds. Else returns false.</returns>
            <exception cref="T:System.ArgumentNullException">'octal' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToHexadecimal(System.String)">
            <summary>
            Converts string input to hexadecimal.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Hexadecimal string. Returns empty string if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToHexadecimal(System.Char)">
            <summary>
            Converts char input to hexadecimal.
            </summary>
            <param name="input">Input as char.</param>
            <returns>Hexadecimal string. Returns empty if fails.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToHexadecimal(System.Int16)">
            <summary>
            Converts Int16 input to hexadecimal.
            </summary>
            <param name="input">Input as Int16.</param>
            <returns>Hexadecimal in string. Returns empty if fails.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToHexadecimal(System.Int32)">
            <summary>
            Converts Int32 input to hexadecimal.
            </summary>
            <param name="input">Input as Int32.</param>
            <returns>Hexadecimal string. Returns empty if fails.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertToHexadecimal(System.Int64)">
            <summary>
            Converts Int64 to hexadecimal.
            </summary>
            <param name="input">Input as Int64.</param>
            <returns>Hexadecimal string. Returns empty if fails.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertFromHexadecimal(System.String,System.Int64[]@)">
            <summary>
            Converts from hexadecimal to array of Int64. Each hexadecimal converted value will be stored in 'result' index.
            </summary>
            <param name="hexadecimal">Hexadecimal data in string format. Ex: 435 014 555.</param>
            <param name="result">Array of Int64. It'll be empty if conversion fails.</param>
            <returns>True if conversion succeeds. Else returns false.</returns>
            <exception cref="T:System.ArgumentNullException">'hexadecimal' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Common.BitHelpers.ConvertFromHexadecimal(System.String,System.String@)">
            <summary> 
            Converts from hexadecimal string to normal string.
            </summary>
            <param name="hexadecimal">Hexadecimal data in string format. Ex: 1C7A B363 87CD. Returns null if fails.</param>
            <param name="result">Normal string as a result of conversion.</param>
            <returns>True if conversion succeeds. Else returns false.</returns>
            <exception cref="T:System.ArgumentNullException">'hexadecimal' cannot be null/empty.</exception>
        </member>
        <member name="T:MirzaCryptoHelpers.DigitalSignatures.HashAlgorithm">
            <summary>
            Hash algorithm to use for digital signature operations.
            </summary>
        </member>
        <member name="T:MirzaCryptoHelpers.DigitalSignatures.RSADataSignature">
            <summary>
            Helper class to perform signing and verifying data using RSA Crypto Algorithm.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.DigitalSignatures.RSADataSignature.SignData(System.Byte[],MirzaCryptoHelpers.DigitalSignatures.HashAlgorithm,System.String)">
            <summary>
            Creates digital signature.
            </summary>
            <param name="dataToSign">Original data to sign.</param>
            <param name="hashAlgorithm">Hash algorithm to use.</param>
            <param name="privateKeyXml">Private key in xml string to sign the data.</param>
            <returns>Signed data in bytes. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'dataToSign' is null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'privateKeyXml' is null/empty.</exception>
            <example>
                To Get RSA Keys
                <code>
                using MirzaCryptoHelpers.AsymmetricCryptos;
                SessionKeys sessionKeys = new RSACrypto().GenerateKeys();
                </code>
            </example>
        </member>
        <member name="M:MirzaCryptoHelpers.DigitalSignatures.RSADataSignature.VerifyData(System.Byte[],System.Byte[],MirzaCryptoHelpers.DigitalSignatures.HashAlgorithm,System.String)">
            <summary>
            Verifies digital signature.
            </summary>
            <param name="originalData">Original data.</param>
            <param name="signedData">Signed data.</param>
            <param name="hashAlgorithm">Hash algorithm to use.</param>
            <param name="publicKeyXml">Public key in xml format to verify the data.</param>
            <returns>Boolean value indicating wheter data is valid or not.</returns>
            <exception cref="T:System.ArgumentNullException">'originalData' is null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'signedData' is null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'publicKeyXml' is null/empty.</exception>
            <example>
                To Get RSA Keys
                <code>
                using MirzaCryptoHelpers.AsymmetricCryptos;
                SessionKeys sessionKeys = new RSACrypto().GenerateKeys();
                </code>
            </example>
        </member>
        <member name="T:MirzaCryptoHelpers.Extensions.CharExtensionHelpers">
            <summary>
            This class contains method extensions for common conversions in char format.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.CharExtensionHelpers.ToUTF8Bytes(System.Char)">
            <summary>
            Converts char to UTF-8 bytes.
            </summary>
            <param name="value">Char value.</param>
            <returns>UTF-8 bytes.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.CharExtensionHelpers.ToBinary(System.Char)">
            <summary>
            Converts char to binary string.
            </summary>
            <param name="value">Char value.</param>
            <returns>Binary string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.CharExtensionHelpers.ToOctal(System.Char)">
            <summary>
            Converts char to octal string.
            </summary>
            <param name="value">Char value.</param>
            <returns>Octal string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.CharExtensionHelpers.ToHexadecimal(System.Char)">
            <summary>
            Converts char to hexadecimal string.
            </summary>
            <param name="value">Char value.</param>
            <returns>Hexadecimal string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.CharExtensionHelpers.GetMD5Hash(System.Char)">
            <summary>
            Gets MD5 hash from current char in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">Char value.</param>
            <returns>MD5 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.CharExtensionHelpers.GetSHA1Hash(System.Char)">
            <summary>
            Gets SHA1 hash from current char in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">Char value.</param>
            <returns>SHA1 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.CharExtensionHelpers.GetSHA256Hash(System.Char)">
            <summary>
            Gets SHA256 hash from current char in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">Char value.</param>
            <returns>SHA256 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.CharExtensionHelpers.GetSHA384Hash(System.Char)">
            <summary>
            Gets SHA384 hash from current char in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">Char value.</param>
            <returns>SHA384 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.CharExtensionHelpers.GetSHA512Hash(System.Char)">
            <summary>
            Gets SHA512 hash from current char in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">Char value.</param>
            <returns>SHA512 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="T:MirzaCryptoHelpers.Extensions.IntExtensionHelpers">
            <summary>
            This class contains method extensions for common conversions in int format.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.IntExtensionHelpers.ToUTF8Bytes(System.Int32)">
            <summary>
            Converts int to UTF-8 bytes.
            </summary>
            <param name="value">int value.</param>
            <returns>UTF-8 bytes.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.IntExtensionHelpers.ToBinary(System.Int32)">
            <summary>
            Converts int to binary string.
            </summary>
            <param name="value">int value.</param>
            <returns>Binary string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.IntExtensionHelpers.ToOctal(System.Int32)">
            <summary>
            Converts int to octal string.
            </summary>
            <param name="value">int value.</param>
            <returns>Octal string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.IntExtensionHelpers.ToHexadecimal(System.Int32)">
            <summary>
            Converts int to hexadecimal string.
            </summary>
            <param name="value">int value.</param>
            <returns>Hexadecimal string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.IntExtensionHelpers.GetMD5Hash(System.Int32)">
            <summary>
            Gets MD5 hash from current int in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">int value.</param>
            <returns>MD5 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.IntExtensionHelpers.GetSHA1Hash(System.Int32)">
            <summary>
            Gets SHA1 hash from current int in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">int value.</param>
            <returns>SHA1 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.IntExtensionHelpers.GetSHA256Hash(System.Int32)">
            <summary>
            Gets SHA256 hash from current int in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">int value.</param>
            <returns>SHA256 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.IntExtensionHelpers.GetSHA384Hash(System.Int32)">
            <summary>
            Gets SHA384 hash from current int in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">int value.</param>
            <returns>SHA384 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.IntExtensionHelpers.GetSHA512Hash(System.Int32)">
            <summary>
            Gets SHA512 hash from current int in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">int value.</param>
            <returns>SHA512 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="T:MirzaCryptoHelpers.Extensions.LongExtensionHelpers">
            <summary>
            This class contains method extensions for common conversions in long format.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.LongExtensionHelpers.ToUTF8Bytes(System.Int64)">
            <summary>
            Converts long to UTF-8 bytes.
            </summary>
            <param name="value">long value.</param>
            <returns>UTF-8 bytes.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.LongExtensionHelpers.ToBinary(System.Int64)">
            <summary>
            Converts long to binary string.
            </summary>
            <param name="value">long value.</param>
            <returns>Binary string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.LongExtensionHelpers.ToOctal(System.Int64)">
            <summary>
            Converts long to octal string.
            </summary>
            <param name="value">long value.</param>
            <returns>Octal string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.LongExtensionHelpers.ToHexadecimal(System.Int64)">
            <summary>
            Converts long to hexadecimal string.
            </summary>
            <param name="value">long value.</param>
            <returns>Hexadecimal string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.LongExtensionHelpers.GetMD5Hash(System.Int64)">
            <summary>
            Gets MD5 hash from current long in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">long value.</param>
            <returns>MD5 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.LongExtensionHelpers.GetSHA1Hash(System.Int64)">
            <summary>
            Gets SHA1 hash from current long in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">long value.</param>
            <returns>SHA1 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.LongExtensionHelpers.GetSHA256Hash(System.Int64)">
            <summary>
            Gets SHA256 hash from current long in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">long value.</param>
            <returns>SHA256 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.LongExtensionHelpers.GetSHA384Hash(System.Int64)">
            <summary>
            Gets SHA384 hash from current long in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">long value.</param>
            <returns>SHA384 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.LongExtensionHelpers.GetSHA512Hash(System.Int64)">
            <summary>
            Gets SHA512 hash from current long in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">long value.</param>
            <returns>SHA512 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="T:MirzaCryptoHelpers.Extensions.ShortExtensionHelpers">
            <summary>
            This class contains method extensions for common conversions in short format.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.ShortExtensionHelpers.ToUTF8Bytes(System.Int16)">
            <summary>
            Converts short to UTF-8 bytes.
            </summary>
            <param name="value">short value.</param>
            <returns>UTF-8 bytes.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.ShortExtensionHelpers.ToBinary(System.Int16)">
            <summary>
            Converts short to binary string.
            </summary>
            <param name="value">short value.</param>
            <returns>Binary string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.ShortExtensionHelpers.ToOctal(System.Int16)">
            <summary>
            Converts short to octal string.
            </summary>
            <param name="value">short value.</param>
            <returns>Octal string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.ShortExtensionHelpers.ToHexadecimal(System.Int16)">
            <summary>
            Convert short to hexadecimal string.
            </summary>
            <param name="value">short value.</param>
            <returns>Hexadecimal string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.ShortExtensionHelpers.GetMD5Hash(System.Int16)">
            <summary>
            Gets MD5 hash from current short in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">short value.</param>
            <returns>MD5 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.ShortExtensionHelpers.GetSHA1Hash(System.Int16)">
            <summary>
            Gets SHA1 hash from current short in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">short value.</param>
            <returns>SHA1 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.ShortExtensionHelpers.GetSHA256Hash(System.Int16)">
            <summary>
            Gets SHA256 hash from current short in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">short value.</param>
            <returns>SHA256 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.ShortExtensionHelpers.GetSHA384Hash(System.Int16)">
            <summary>
            Gets SHA384 hash from current short in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">short value.</param>
            <returns>SHA384 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.ShortExtensionHelpers.GetSHA512Hash(System.Int16)">
            <summary>
            Gets SHA512 hash from current short in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">short value.</param>
            <returns>SHA512 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="T:MirzaCryptoHelpers.Extensions.StringExtensionHelpers">
            <summary>
            This class contains method extensions for common conversions in string format.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.StringExtensionHelpers.ToUTF8Bytes(System.String)">
            <summary>
            Converts string to UTF-8 bytes.
            </summary>
            <param name="value">String value. If null/empty, returns null.</param>
            <returns>UTF-8 bytes.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.StringExtensionHelpers.ToBinary(System.String)">
            <summary>
            Converts string to binary string.
            </summary>
            <param name="value">String value. If null/empty, returns null.</param>
            <returns>Binary string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.StringExtensionHelpers.FromBinary(System.String)">
            <summary>
            Converts from binary string to string. If conversion fails, return null.
            </summary>
            <param name="value">String value. If null/empty, returns null.</param>
            <returns>Converted string. If conversion fails, return null.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.StringExtensionHelpers.ToOctal(System.String)">
            <summary>
            Converts string to octal string.
            </summary>
            <param name="value">String value. If null/empty, returns null.</param>
            <returns>Octal string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.StringExtensionHelpers.FromOctal(System.String)">
            <summary>
            Converts from octal string to string. If conversion fails, return null.
            </summary>
            <param name="value">String value. If null/empty, returns null.</param>
            <returns>Converted string. If conversion fails, return null.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.StringExtensionHelpers.ToHexadecimal(System.String)">
            <summary>
            Converts string to hexadecimal string.
            </summary>
            <param name="value">String value. If null/empty, returns null.</param>
            <returns>Hexadecimal string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.StringExtensionHelpers.FromHexadecimal(System.String)">
            <summary>
            Converts from hexadecimal string to string. If conversion fails, return null.
            </summary>
            <param name="value">String value. If null/empty, returns null.</param>
            <returns>Converted string. If conversion fails, return null.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.StringExtensionHelpers.GetMD5Hash(System.String)">
            <summary>
            Gets MD5 hash from current string in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">String value. If null/empty, returns null</param>
            <returns>MD5 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.StringExtensionHelpers.GetSHA1Hash(System.String)">
            <summary>
            Gets SHA1 hash from current string in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">String value. If null/empty, returns null</param>
            <returns>SHA1 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.StringExtensionHelpers.GetSHA256Hash(System.String)">
            <summary>
            Gets SHA256 hash from current string in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">String value. If null/empty, returns null</param>
            <returns>SHA256 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.StringExtensionHelpers.GetSHA384Hash(System.String)">
            <summary>
            Gets SHA384 hash from current string in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">String value. If null/empty, returns null</param>
            <returns>SHA384 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.StringExtensionHelpers.GetSHA512Hash(System.String)">
            <summary>
            Gets SHA512 hash from current string in Base64 encoded string format. Returns null if fails.
            </summary>
            <param name="value">String value. If null/empty, returns null</param>
            <returns>SHA512 hash in Base64 encoded string. Returns null if fails </returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.StringExtensionHelpers.ToBase64String(System.String)">
            <summary>
            Converts current string to Base64 encoded string.
            </summary>
            <param name="value">String value.</param>
            <returns>Base64 encoded string.</returns>
        </member>
        <member name="M:MirzaCryptoHelpers.Extensions.StringExtensionHelpers.FromBase64String(System.String)">
            <summary>
            Converts Base64 encoded string to normal string. Returns null either it's invalid format or conversion fails.
            </summary>
            <param name="value">Base64 encoded string.</param>
            <returns>Normal string. Returns null either it's invalid format or conversion fails.</returns>
        </member>
        <member name="T:MirzaCryptoHelpers.Hashings.HashCrypto">
            <summary>
            General Hash class that can be used to perform dependency injection.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.HashCrypto.#ctor">
            <summary>
            Main constructor. If no parameter passed, SHA256Crypto will be used.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.HashCrypto.#ctor(MirzaCryptoHelpers.Hashings.IHashCrypto)">
            <summary>
            Injectable constructor. Used commonly for dependency injection.
            </summary>
            <param name="hash">Concreate implementation of IHash interface.</param>
        </member>
        <member name="P:MirzaCryptoHelpers.Hashings.HashCrypto.HashSize">
            <summary>
            Key size
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.HashCrypto.GetHashBase64String(System.String)">
            <summary>
            Hashes data and converts it to Base64 encoded string.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Hash data in Base64 encoded string format.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.HashCrypto.GetHashBase64String(System.Byte[])">
            <summary>
            Hashes data and converts it to Base64 encoded string.
            </summary>
            <param name="input">Input as bytes.</param>
            <returns>Hash data in Base64 encoded string format.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.HashCrypto.GetHashBytes(System.String)">
            <summary>
            Hashes string data to hash bytes.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Hash data in bytes. Returns empty if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.HashCrypto.GetHashBytes(System.Byte[])">
            <summary>
            Hashes bytes data to hash bytes.
            </summary>
            <param name="input">Input as bytes.</param>
            <returns>Hash data in bytes. Returns empty if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
        </member>
        <member name="T:MirzaCryptoHelpers.Hashings.MD5Crypto">
            <summary>
            This class is used to hash data with MD5 Algorithm.
            </summary>
        </member>
        <member name="P:MirzaCryptoHelpers.Hashings.MD5Crypto.HashSize">
            <summary>
            Gets/Sets size of the current hash algorithm.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.MD5Crypto.GetHashBytes(System.String)">
            <summary>
            Hashes string data to hash bytes.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Hash data in bytes. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.MD5Crypto.GetHashBytes(System.Byte[])">
            <summary>
            Hashes bytes data to hash bytes.
            </summary>
            <param name="input">Input as bytes.</param>
            <returns>Hash data in bytes. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.MD5Crypto.GetHashBase64String(System.String)">
            <summary>
            Hashes data and converts it to Base64 encoded string.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Hash data in Base64 encoded string format. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.MD5Crypto.GetHashBase64String(System.Byte[])">
            <summary>
            Hashes data and convertes it to Base64 encoded string.
            </summary>
            <param name="input">Input as bytes.</param>
            <returns>Hash data in Base64 encoded string format. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="T:MirzaCryptoHelpers.Hashings.SHA1Crypto">
            <summary>
            This class is used to hash data with SHA1 Algorithm.
            </summary>
        </member>
        <member name="P:MirzaCryptoHelpers.Hashings.SHA1Crypto.HashSize">
            <summary>
            Gets/Sets size of the current hash algorithm.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA1Crypto.GetHashBytes(System.String)">
            <summary>
            Hashes string data to hash bytes.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Hash data in bytes. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA1Crypto.GetHashBytes(System.Byte[])">
            <summary>
            Hashes bytes data to hash bytes.
            </summary>
            <param name="input">Input as bytes.</param>
            <returns>Hash data in bytes. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA1Crypto.GetHashBase64String(System.String)">
            <summary>
            Hashes data and converts it to Base64 encoded string.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Hash data in Base64 encoded string format. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA1Crypto.GetHashBase64String(System.Byte[])">
            <summary>
            Hashes data and converts it to Base64 encoded string.
            </summary>
            <param name="input">Input as bytes.</param>
            <returns>Hash data in Base64 encoded string format. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="T:MirzaCryptoHelpers.Hashings.SHA256Crypto">
            <summary>
            This class is used to hash data with SHA256 Algorithm.
            </summary>
        </member>
        <member name="P:MirzaCryptoHelpers.Hashings.SHA256Crypto.HashSize">
            <summary>
            Gets/Sets size of the current hash algorithm.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA256Crypto.GetHashBytes(System.String)">
            <summary>
            Hashes string data to hash bytes.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Hash data in bytes. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA256Crypto.GetHashBytes(System.Byte[])">
            <summary>
            Hashes bytes data to hash bytes.
            </summary>
            <param name="input">Input as bytes.</param>
            <returns>Hash data in bytes. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA256Crypto.GetHashBase64String(System.String)">
            <summary>
            Hashes data and converts it to Base64 encoded string.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Hash data in Base64 encoded string format. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA256Crypto.GetHashBase64String(System.Byte[])">
            <summary>
            Hashes data and converts it to Base64 encoded string.
            </summary>
            <param name="input">Input as bytes.</param>
            <returns>Hash data in Base64 encoded string format. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="T:MirzaCryptoHelpers.Hashings.SHA384Crypto">
            <summary>
            This class is used to hash data with SHA384 Algorithm.
            </summary>
        </member>
        <member name="P:MirzaCryptoHelpers.Hashings.SHA384Crypto.HashSize">
            <summary>
            Gets/Sets size of the current hash algorithm.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA384Crypto.GetHashBytes(System.String)">
            <summary>
            Hash string data to hash bytes.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Hash data in bytes. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA384Crypto.GetHashBytes(System.Byte[])">
            <summary>
            Hashes bytes data to hash bytes.
            </summary>
            <param name="input">Input as bytes.</param>
            <returns>Hash data in bytes. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA384Crypto.GetHashBase64String(System.String)">
            <summary>
            Hashes data and converts it to Base64 encoded string.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Hash data in Base64 encoded string format. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA384Crypto.GetHashBase64String(System.Byte[])">
            <summary>
            Hashes data and converts it to Base64 encoded string.
            </summary>
            <param name="input">Input as bytes.</param>
            <returns>Hash data in Base64 encoded string format. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="T:MirzaCryptoHelpers.Hashings.SHA512Crypto">
            <summary>
            This class is used to hash data with SHA512 Algorithm.
            </summary>
        </member>
        <member name="P:MirzaCryptoHelpers.Hashings.SHA512Crypto.HashSize">
            <summary>
            Gets/Sets size of the current hash algorithm.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA512Crypto.GetHashBytes(System.String)">
            <summary>
            Hashes string data to hash bytes.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Hash data in bytes. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA512Crypto.GetHashBytes(System.Byte[])">
            <summary>
            Hashes bytes data to hash bytes.
            </summary>
            <param name="input">Input as bytes.</param>
            <returns>Hash data in bytes. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA512Crypto.GetHashBase64String(System.String)">
            <summary>
            Hashes data and converts it to Base64 encoded string.
            </summary>
            <param name="input">Input as string.</param>
            <returns>Hash data in Base64 encoded string format. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.Hashings.SHA512Crypto.GetHashBase64String(System.Byte[])">
            <summary>
            Hashes data and converts it to Base64 encoded string.
            </summary>
            <param name="input">Input as bytes.</param>
            <returns>Hash data in Base64 encoded string format. Returns null if fails.</returns>
            <exception cref="T:System.ArgumentNullException">'input' cannot be null/empty.</exception>
        </member>
        <member name="T:MirzaCryptoHelpers.SymmetricCryptos.AESCrypto">
            <summary>
            This class simplifies symmetric cryptography operations using AES.
            </summary>
        </member>
        <member name="P:MirzaCryptoHelpers.SymmetricCryptos.AESCrypto.ValidIVSize">
            <summary>
            Gets valid IV size.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.AESCrypto.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypts bytes of data with password using static IV.
            </summary>
            <param name="data">Data in bytes.</param>
            <param name="password">Key/Password to encrypt.</param>
            <returns>Encrypted data in bytes. Returns null if encryption fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.AESCrypto.Encrypt(System.Byte[],System.String,System.Byte[]@)">
            <summary>
            Encrypts bytes of data with password using self-generated IV.
            </summary>
            <param name="data">Data in bytes.</param>
            <param name="password">Key/Password to encrypt.</param>
            <param name="iv">Self-generated IV.</param>
            <returns>Encrypted data in bytes. Returns null if encryption fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.AESCrypto.Encrypt(System.Byte[],System.String,System.Byte[])">
            <summary>
            Encrypts bytes of data with password using dynamic IV.
            </summary>
            <param name="data">Data in bytes.</param>
            <param name="password">Key/Password to encrypt.</param>
            <param name="iv">Dynamic IV</param>
            <returns>Encrypted data in bytes. Returns null if encryption fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">'iv' has invalid size.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.AESCrypto.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypts bytes of data with password using static IV.
            </summary>
            <param name="data">Encrypted data.</param>
            <param name="password">Password/Key to decrypt.</param>
            <returns>Decrypted data in bytes. Returns null either decryption fails or password is incorrect.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.AESCrypto.Decrypt(System.Byte[],System.String,System.Byte[])">
            <summary>
            Decrypts bytes of data with password using dynamic IV.
            </summary>
            <param name="data">Encrypted data.</param>
            <param name="password">Password/Key to decrypt.</param>
            <param name="iv">Dynamic IV.</param>
            <returns>Decrypted data in bytes. Returns null either decryption fails or password is incorrect.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">'iv' has invalid size.</exception>
        </member>
        <member name="T:MirzaCryptoHelpers.SymmetricCryptos.DESCrypto">
            <summary>
            This class simplifies symmetric cryptography operations using DES.
            </summary>
        </member>
        <member name="P:MirzaCryptoHelpers.SymmetricCryptos.DESCrypto.ValidIVSize">
            <summary>
            Gets valid IV size.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.DESCrypto.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypts bytes of data with password using static IV.
            </summary>
            <param name="data">Data in bytes.</param>
            <param name="password">Key/Password to encrypt.</param>
            <returns>Encrypted data in bytes. Returns null if encryption fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.DESCrypto.Encrypt(System.Byte[],System.String,System.Byte[]@)">
            <summary>
            Encrypts bytes of data with password using self-generated IV.
            </summary>
            <param name="data">Data in bytes.</param>
            <param name="password">Key/Password to encrypt.</param>
            <param name="iv">Self-generated IV.</param>
            <returns>Encrypted data in bytes. Returns null if encryption fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.DESCrypto.Encrypt(System.Byte[],System.String,System.Byte[])">
            <summary>
            Encrypts bytes of data with password using dynamic IV.
            </summary>
            <param name="data">Data in bytes.</param>
            <param name="password">Key/Password to encrypt.</param>
            <param name="iv">Dynamic IV</param>
            <returns>Encrypted data in bytes. Returns null if encryption fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">'iv' has invalid size.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.DESCrypto.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypts bytes of data with password using static IV.
            </summary>
            <param name="data">Encrypted data.</param>
            <param name="password">Password/Key to decrypt.</param>
            <returns>Decrypted data in bytes. Returns null either decryption fails or password is incorrect.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.DESCrypto.Decrypt(System.Byte[],System.String,System.Byte[])">
            <summary>
            Decrypts bytes of data with password using dynamic IV.
            </summary>
            <param name="data">Encrypted data.</param>
            <param name="password">Password/Key to decrypt.</param>
            <param name="iv">Dynamic IV.</param>
            <returns>Decrypted data in bytes. Returns null either decryption fails or password is incorrect.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">'iv' has invalid size.</exception>
        </member>
        <member name="T:MirzaCryptoHelpers.SymmetricCryptos.SymmetricCrypto">
            <summary>
            General Symmetric Cryptography class that can be used by any class which implements ISymmetricCrypto interface.
            This class can be used for dependency injection.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.SymmetricCrypto.#ctor">
            <summary>
            Main constructor that initializes encryption algorithm using AES
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.SymmetricCrypto.#ctor(MirzaCryptoHelpers.SymmetricCryptos.ISymmetricCrypto)">
            <summary>
            Secondary constructor that accepts class that implements ISymmetricCrypto interface.
            </summary>
            <param name="symmetricCrypto">Any class that implements ISymmetricCrypto interface. If null, an instance of AESCrypto will be used.</param>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.SymmetricCrypto.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypts bytes of data with password using static IV.
            </summary>
            <param name="data">Data in bytes.</param>
            <param name="password">Key/Password to encrypt.</param>
            <returns>Encrypted data in bytes. Returns null if encryption fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.SymmetricCrypto.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypts bytes of data with password using static IV.
            </summary>
            <param name="data">Encrypted data.</param>
            <param name="password">Password/Key to decrypt.</param>
            <returns>Decrypted data in bytes. Returns null either decryption fails or password is incorrect.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.SymmetricCrypto.Encrypt(System.String,System.String)">
            <summary>
            Encrypts data in string format with password using static IV.
            It will return cipher text in Base64 string format.
            </summary>
            <param name="plainText">Plain text or data to encrypt.</param>
            <param name="password">Password to encrypt.</param>
            <returns>Cipher text in Base64 string format. Returns null either decryption fails or password is incorrect.</returns>
            <exception cref="T:System.ArgumentNullException">'plainText' is null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'password' is null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.SymmetricCrypto.Decrypt(System.String,System.String)">
            <summary>
            Decrypts data from Base64 string cipher text to plain text using static IV.
            NOTE: If cipher text is not in valid Base64 string format, InvalidOperationException will be thrown.
            </summary>
            <param name="base64CipherText">Cipher text in Base64 string format.</param>
            <param name="password">Password to decrypt data.</param>
            <returns>Plain text. Returns null either decryption fails or password is incorrect.</returns>
        </member>
        <member name="T:MirzaCryptoHelpers.SymmetricCryptos.TripleDESCrypto">
            <summary>
            This class simplifies symmetric cryptography operations using Triple DES.
            </summary>
        </member>
        <member name="P:MirzaCryptoHelpers.SymmetricCryptos.TripleDESCrypto.ValidIVSize">
            <summary>
            Gets valid IV size.
            </summary>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.TripleDESCrypto.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypts bytes of data with password using static IV.
            </summary>
            <param name="data">Data in bytes.</param>
            <param name="password">Key/Password to encrypt.</param>
            <returns>Encrypted data in bytes. Returns null if encryption fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.TripleDESCrypto.Encrypt(System.Byte[],System.String,System.Byte[]@)">
            <summary>
            Encrypts bytes of data with password using self-generated IV.
            </summary>
            <param name="data">Data in bytes.</param>
            <param name="password">Key/Password to encrypt.</param>
            <param name="iv">Self-generated IV.</param>
            <returns>Encrypted data in bytes. Returns null if encryption fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.TripleDESCrypto.Encrypt(System.Byte[],System.String,System.Byte[])">
            <summary>
            Encrypts bytes of data with password using dynamic IV.
            </summary>
            <param name="data">Data in bytes.</param>
            <param name="password">Key/Password to encrypt.</param>
            <param name="iv">Dynamic IV</param>
            <returns>Encrypted data in bytes. Returns null if encryption fails.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null/empty.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">'iv' has invalid size.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.TripleDESCrypto.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypts bytes of data with password using static IV.
            </summary>
            <param name="data">Encrypted data.</param>
            <param name="password">Password/Key to decrypt.</param>
            <returns>Decrypted data in bytes. Returns null either decryption fails or password is incorrect.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty.</exception>
        </member>
        <member name="M:MirzaCryptoHelpers.SymmetricCryptos.TripleDESCrypto.Decrypt(System.Byte[],System.String,System.Byte[])">
            <summary>
            Decrypts bytes of data with password using dynamic IV.
            </summary>
            <param name="data">Encrypted data.</param>
            <param name="password">Password/Key to decrypt.</param>
            <param name="iv">Dynamic IV.</param>
            <returns>Decrypted data in bytes. Returns null either decryption fails or password is incorrect.</returns>
            <exception cref="T:System.ArgumentNullException">'data' cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">'password' cannot be null/empty</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">'iv' has invalid size.</exception>
        </member>
    </members>
</doc>
